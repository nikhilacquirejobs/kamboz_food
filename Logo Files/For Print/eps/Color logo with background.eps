%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2372 546
%%HiResBoundingBox: 0 0 2371.9199 546
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2371.9199 546 re
W
q
[0.24 0 0 -0.24 0 546] cm
q
0 0 9883.333 2272.354 re
W*
q
[3.125492 0 0 3.127795 0.00991442 0] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
0 0 3162.1621 727.50281 re
f
Q
q
[19.451139 0 0 19.465467 159.102509 168.54091] cm
/DeviceRGB {} CS
[0.949 0.3647 0.6118] SC
/DeviceRGB {} cs
[0.949 0.3647 0.6118] sc
54.353069 49.289421 m
57.374748 46.176556 60.658546 42.846413 64.231567 39.281975 c
64.23671 39.276852 64.241859 39.271717 64.247009 39.266567 c
67.886528 35.627048 72.045982 41.866226 79.844955 34.067253 c
85.701614 28.210588 95.702866 15.089755 95.96283 14.829789 c
96.222794 14.569824 95.832848 14.179875 95.572876 14.439841 c
95.312912 14.699807 80.364883 29.387871 79.844955 29.907803 c
79.32502 30.427732 78.545128 30.167767 78.155174 29.777819 c
78.285156 29.907803 77.769859 29.392504 77.89521 29.517853 c
77.509895 29.132538 77.245293 28.348007 77.765228 27.828075 c
78.285156 27.308144 92.973221 11.320252 93.233185 11.060287 c
93.493156 10.800321 92.973221 10.280389 92.713257 10.540355 c
92.453293 10.800321 76.465401 26.008316 75.945465 26.528248 c
75.425537 27.04818 74.671028 26.813601 74.255692 26.398264 c
74.411057 26.553635 73.881927 26.0245 73.995728 26.138298 c
73.621964 25.764534 73.34581 24.968452 73.865738 24.448521 c
74.385674 23.928591 89.593666 7.940698 89.85363 7.680732 c
90.113602 7.420766 89.593666 6.900835 89.333702 7.1608 c
89.073738 7.420766 73.085846 22.108829 72.56591 22.628761 c
72.045982 23.148693 71.278526 22.901167 70.876137 22.498779 c
71.018555 22.641201 70.486183 22.108829 70.616173 22.238813 c
70.226219 21.848864 69.966255 21.068968 70.486183 20.549036 c
71.006119 20.029104 85.694183 5.081075 85.954147 4.821109 c
86.214111 4.561143 85.763428 4.231934 85.564201 4.43116 c
85.364975 4.630387 74.12571 12.750064 66.326736 20.549036 c
58.527763 28.348007 64.766937 32.507458 61.127422 36.14698 c
61.122272 36.15213 61.117134 36.157276 61.112015 36.162422 c
57.504467 39.778656 54.136921 43.098625 50.991722 46.150436 c
52.139423 47.231346 53.259632 48.277214 54.353069 49.289421 c
h
49.110058 54.747059 m
24.144936 81.020645 19.990438 89.762314 15.501552 94.251205 c
13.994504 95.758247 11.015623 95.428474 7.054549 93.339439 c
4.965511 89.378365 4.635737 86.399483 6.142785 84.892441 c
10.638578 80.396645 19.400257 76.236267 45.768337 51.168541 c
46.921455 52.392281 48.034809 53.584827 49.110058 54.747059 c
h
f*
41.162758 38.167007 m
78.119743 75.000282 88.97126 79.737183 94.153893 84.919823 c
95.660942 86.426865 95.331169 89.405746 93.242126 93.366821 c
89.281052 95.455856 86.302177 95.785637 84.795128 94.278587 c
79.948662 89.432121 75.491982 79.628342 44.813705 48.155231 c
41.232716 45.79829 36.447124 53.381199 29.034065 45.96814 c
21.235094 38.169167 1.064092 12.869981 5.472019 8.462054 c
7.758625 6.175448 9.047088 6.049696 21.492691 18.495298 c
29.042168 26.044777 36.024818 33.028347 41.162758 38.167007 c
h
f*
Q
q
[47.431232 0 0 47.466179 2397.5911 -87.744576] cm
/DeviceRGB {} CS
[0.349 0.051 0.5098] SC
/DeviceRGB {} cs
[0.349 0.051 0.5098] sc
22.48 12 m
15.879999 21.959999 l
23.079998 40 l
16.279999 40 l
11.639999 28.4 l
9.279999 31.959999 l
9.279999 40 l
2.879999 40 l
2.879999 12 l
9.279999 12 l
9.279999 21.639999 l
15.679998 11.999999 l
22.48 11.999999 l
22.48 12 l
h
41.639999 12 m
49.439999 40 l
43.039997 40 l
41.919998 35.959999 l
35 35.959999 l
33.880001 40 l
27.480001 40 l
35.280003 12 l
41.640003 12 l
41.639999 12 l
h
36.799999 29.440001 m
40.119999 29.440001 l
38.439999 23.48 l
36.799999 29.440001 l
h
71.800003 12 m
78.200005 12 l
78.200005 40 l
71.800003 40 l
71.800003 27.48 l
67.720001 37.32 l
65.68 37.32 l
61.599998 27.48 l
61.599998 40 l
55.199997 40 l
55.199997 12 l
61.599998 12 l
66.68 24.279999 l
71.800003 12 l
h
98.760002 12 m
101.520004 12 103.760002 14.24 103.760002 17 c
103.760002 22.280001 l
103.760002 24.120001 102.440002 25.68 100.599998 25.960001 c
100.360001 26.000002 l
100.599998 26.040003 l
102.439995 26.360003 103.760002 27.920002 103.760002 29.720003 c
103.760002 35.040005 l
103.760002 37.760006 101.520004 40.000004 98.760002 40.000004 c
83.959999 40.000004 l
83.959999 12.000004 l
98.760002 12.000004 l
98.760002 12 l
h
97.360001 32.279999 m
97.360001 30.559999 l
97.360001 29.799999 96.760002 29.24 96.040001 29.24 c
90.360001 29.24 l
90.360001 33.599998 l
96.040001 33.599998 l
96.760002 33.599998 97.360001 33 97.360001 32.279999 c
h
97.360001 21.48 m
97.360001 19.76 l
97.360001 19.040001 96.760002 18.440001 96.040001 18.440001 c
90.360001 18.440001 l
90.360001 22.800001 l
96.040001 22.800001 l
96.760002 22.800001 97.360001 22.200001 97.360001 21.480001 c
97.360001 21.48 l
h
124.160004 12 m
126.880005 12 129.199997 14.24 129.199997 17 c
129.119995 35.040001 l
129.119995 37.799999 126.879997 40 124.119995 40 c
114.279999 40 l
111.559998 40 109.32 37.799999 109.32 35.040001 c
109.32 17 l
109.32 14.24 111.559998 12 114.279999 12 c
124.159996 12 l
124.160004 12 l
h
122.720001 33.599998 m
122.720001 18.439999 l
115.720001 18.439999 l
115.720001 33.599998 l
122.720001 33.599998 l
h
152.479996 12 m
152.479996 18.440001 l
142.399994 33.599998 l
152.479996 33.599998 l
152.479996 40 l
134.87999 40 l
134.87999 33.599998 l
144.999985 18.439999 l
134.87999 18.439999 l
134.87999 11.999998 l
152.479996 11.999998 l
152.479996 12 l
h
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
